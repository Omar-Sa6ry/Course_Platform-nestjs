# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Request {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  courseId: String!
  status: RequestStatus!
  user: User!
  course: Course!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Detailed status of requests in the system"""
enum RequestStatus {
  APPROVED
  PENDING
  REJECTED
  CANCELED
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  fullName: String!
  headline: String!
  phone: String!
  whatsapp: String!
  nationalId: String!
  email: String!
  avatar: String
  isActive: Boolean
  courses: [Course!]
  requests: [Request!]!
}

type Course {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  subtitle: String!
  description: String!
  learningOutcomes: String!
  requirements: String!
  targetAudience: String!
  price: Float!
  discountPrice: Float
  level: CourseLevel!
  imageUrl: String
  promoVideoUrl: String
  totalLectures: Int!
  totalHours: Float!
  ratingAvg: Float!
  ratingCount: Int!
  studentCount: Int!
  isActive: Boolean
  instructor: User!
  category: Category!
  requests: [Request!]!
  finalPrice: Float!
}

"""Detailed CourseLevel in the system"""
enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL
}

type Category {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  courses: [Course!]
}

type AuthOutPut {
  user: User!
  token: String!
}

type AuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AuthOutPut
}

type PaginationInfo {
  totalPages: Int!
  currentPage: Int!
  totalItems: Int!
}

type UserResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: User
}

type UsersResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [User!]
  pagination: PaginationInfo
}

type CategoryResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Category
}

type CategoriesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Category!]
  pagination: PaginationInfo
}

type CourseResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Course
}

type CoursesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Course!]
  pagination: PaginationInfo
}

type CourseCountResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Int
}

type RequestResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: Request
}

type RequestsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [Request!]
  pagination: PaginationInfo
}

type Query {
  sayHello: String!
  getUserById(id: UserIdInput!): UserResponse!
  getUserByEmail(email: EmailInput!): UserResponse!
  getUsers(page: Int, limit: Int): UsersResponse!
  getInstructors(page: Int, limit: Int): UsersResponse!
  deleteUser(id: UserIdInput!): UserResponse!
  getAllCategories(page: Float, limit: Float): CategoriesResponse!
  getAllCategoriesWithoutPagingation: CategoriesResponse!
  getCategoryById(id: CategoryIdInput!): CategoryResponse!
  getCategoryByName(name: CategoryNameInput!): CategoryResponse!
  findCourseById(id: CourseIdInput!): CourseResponse!
  findCourseByTitle(title: CourseTitleInput!): CourseResponse!
  findAllCourses(findCourseInput: FindCourseInput!, page: Float, limit: Float): CoursesResponse!
  findAllCoursesWithoutPag(findCourseInput: FindCourseInput!): CoursesResponse!
  countCourses: CourseCountResponse!
  countAllCourses: CourseCountResponse!
  findRequestById(id: String!): RequestResponse!
  findAllRequests(findRequestInput: FindRequestInput, page: Float, limit: Float): RequestsResponse!
  findAllRequestsWithoutPag(findRequestInput: FindRequestInput): RequestsResponse!
  findCoursesForUser: CoursesResponse!
  findCoursesByUserId(userId: String!): CoursesResponse!
}

input UserIdInput {
  UserId: String!
}

input EmailInput {
  email: String!
}

input CategoryIdInput {
  categoryId: String!
}

input CategoryNameInput {
  name: String!
}

input CourseIdInput {
  courseId: String!
}

input CourseTitleInput {
  title: String!
}

input FindCourseInput {
  title: String
  subtitle: String
  description: String
  targetAudience: String
  requirements: String
  learningOutcomes: String
  level: CourseLevel
  discountPrice: Float
  price: Float
  totalHours: Float
  totalLectures: Float
  image: CreateImagDto
  demo_video: CreateVideoDto
  isActive: Boolean
  instructorId: String
  categoryId: String
}

input CreateImagDto {
  name: String
  breed: String
  image: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateVideoDto {
  title: String
  description: String
  video: Upload!
}

input FindRequestInput {
  userId: String
  courseId: String
  status: RequestStatus
}

type Mutation {
  register(createUserDto: CreateUserDto!): AuthResponse!
  login(loginDto: LoginDto!): AuthResponse!
  forgotPassword: AuthResponse!
  resetPassword(resetPasswordDto: ResetPasswordDto!): UserResponse!
  changePassword(changePasswordDto: ChangePasswordDto!): UserResponse!
  updateUser(updateUserDto: UpdateUserDto!): UserResponse!
  UpdateUserRoleToAdmin(id: UserIdInput!): UserResponse!
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryResponse!
  updateCategory(id: CategoryIdInput!, updateCategoryInput: UpdateCategoryInput!): CategoryResponse!
  deleteCategory(id: CategoryIdInput!): CategoryResponse!
  createCourse(createCourseInput: CreateCourseInput!): CourseResponse!
  updateCourse(updateCourseInput: UpdateCourseInput!): CourseResponse!
  activationCourse(id: CourseIdInput!): CourseResponse!
  deActivationCourse(id: CourseIdInput!): CourseResponse!
  deleteCourse(id: CourseIdInput!): CourseResponse!
  createRequest(courseIdInput: CourseIdInput!): RequestResponse!
  acceptRequest(requestId: String!): RequestResponse!
  rejectRequest(requestId: String!): RequestResponse!
  cancelRequest(requestId: String!): RequestResponse!
  deleteRequest(requestId: String!): RequestResponse!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  headline: String!
  email: String!
  password: String!
  phone: String!
  whatsapp: String!
  nationalId: String!
  fcmToken: String!
  image: CreateImagDto
}

input LoginDto {
  email: String!
  password: String!
  fcmToken: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input UpdateUserDto {
  firstName: String
  lastName: String
  avatar: CreateImagDto
  phone: String
  whatsapp: String
}

input CreateCategoryInput {
  name: String!
  description: String!
}

input UpdateCategoryInput {
  name: String
  description: String
}

input CreateCourseInput {
  title: String!
  subtitle: String!
  description: String!
  targetAudience: String!
  requirements: String!
  learningOutcomes: String!
  level: CourseLevel!
  discountPrice: Float
  price: Float!
  totalHours: Float!
  totalLectures: Float!
  image: CreateImagDto
  demo_video: CreateVideoDto
  isActive: Boolean
  instructorId: String!
  categoryId: String!
}

input UpdateCourseInput {
  title: String
  subtitle: String
  description: String
  targetAudience: String
  requirements: String
  learningOutcomes: String
  level: CourseLevel
  discountPrice: Float
  price: Float
  totalHours: Float
  totalLectures: Float
  image: CreateImagDto
  demo_video: CreateVideoDto
  instructorId: String
  categoryId: String
  id: String!
}